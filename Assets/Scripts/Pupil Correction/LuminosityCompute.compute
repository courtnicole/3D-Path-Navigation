#include "UnityShaderVariables.cginc"

#pragma kernel compute_luminance

#define GROUP_SIZE 256

#define LINEAR_TO_XYZ_X float3(0.4124564, 0.3575761, 0.1804375)
#define LINEAR_TO_XYZ_Y float3(0.2126729, 0.7151522, 0.0721750)
#define LINEAR_TO_XYZ_Z float3(0.0193339, 0.1191920, 0.9503041)

float3 get_linear_to_xyz(const float3 color)
{
    return float3(
        dot(color, LINEAR_TO_XYZ_X),
        dot(color, LINEAR_TO_XYZ_Y),
        dot(color, LINEAR_TO_XYZ_Z)
    );
}

float2 get_fixation_point(float3 normalized_gaze_direction, const float tan_half_horizontal_fov, const float tan_half_vertical_fov)
{
    float2 gaze_point;
    gaze_point.x = (normalized_gaze_direction.x / normalized_gaze_direction.z) / tan_half_horizontal_fov;
    gaze_point.y = (normalized_gaze_direction.y / normalized_gaze_direction.z) / tan_half_vertical_fov;
    gaze_point.x = -gaze_point.x;

    gaze_point = (gaze_point + float2(1.0,1.0)) / 2.0f;
    return gaze_point;
}

bool inside_fovea(const float2 fixation_point, const float2 pixel_position, const float radius_sq)
{
    const float2 diff = fixation_point - pixel_position;
    return dot(diff, diff) < radius_sq;
}

RWTexture2D<float3> linear_source;
uint2 source_size;
float3 gaze_direction;
float2 tan_half_fov;
static const uint radius_sq = 182726;
RWStructuredBuffer<float3> average_luminance;

groupshared float shared_partial_average[GROUP_SIZE];
groupshared float shared_partial_fovea[GROUP_SIZE];

[numthreads(GROUP_SIZE, 1, 1)]
void compute_luminance(uint3 groupThreadID : SV_GroupThreadID, uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // Color value is already in Linear space, can skip conversion from sRGB (HDR processing occurs with sRGB values in linear space)
    const float3 xyz_color = get_linear_to_xyz(linear_source.Load(dispatchThreadID.xy));
    float2 fixation_point = get_fixation_point(gaze_direction, tan_half_fov.x, tan_half_fov.y);
    fixation_point.x += lerp(0.025, -0.025, unity_StereoEyeIndex);

    const float pixel_luminance = xyz_color.y;
    const float fovea_luminance = xyz_color.y * inside_fovea(fixation_point, dispatchThreadID.xy, radius_sq);

    shared_partial_average[groupThreadID.x] = pixel_luminance;
    shared_partial_fovea[groupThreadID.x] = fovea_luminance;
    GroupMemoryBarrierWithGroupSync();
    
    [unroll]
    for (uint stride = GROUP_SIZE / 2; stride > 0; stride >>= 1)
    {
        shared_partial_average[groupThreadID.x] += (shared_partial_average[groupThreadID.x + stride] * (groupThreadID.x < stride));
        shared_partial_fovea[groupThreadID.x] += (shared_partial_fovea[groupThreadID.x + stride] * (groupThreadID.x < stride));
        
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (groupThreadID.x == 0)
    {
        average_luminance[0] = average_luminance[0] + float3(shared_partial_average[0], shared_partial_fovea[0], 0.0f);
    }
}