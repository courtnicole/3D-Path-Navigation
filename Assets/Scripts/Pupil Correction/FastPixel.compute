#include "Luminosity.cginc"
#include "UnityShaderVariables.cginc"


#pragma kernel linear_to_xyz
#define GROUP_SIZE 8

Texture2D linear_source;
RWTexture2D<float4> xyz_source;

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void linear_to_xyz(uint3 globalId : SV_DispatchThreadID)
{
    //uint3 corrected_xyz = globalId;
    // corrected_xyz.y = _ReverseY * (_ScreenParams.y - corrected_xyz.y) + (1 - _ReverseY) * corrected_xyz.y;
    // float2 uv = float2(corrected_xyz.xy) / _ScreenParams.xy;
    // float4 coords = screenCoords(uv, unity_StereoEyeIndex);

    if (globalId.x >= _ScreenParams.x || globalId.y >= _ScreenParams.y)
    {
        return;
    }

    // Color value is already in Linear space, can skip conversion from sRGB
    // (HDR processing occurs with sRGB values in linear space)
    const float4 color = linear_source[globalId.xy];
    const float alpha = color.x * color.y * color.z == 1.0f ? 0.0f : 1.0f;
    const float4 xyz = float4(get_linear_to_xyz(color.xyz), alpha);
    xyz_source[globalId.xy] = xyz;
    //    xyz_source[globalId.xy] = float4(xyz.y, xyz.y, xyz.y, 1.0f);
}

#pragma kernel read_luminance
RWTexture2D<float4> mip_source;
RWStructuredBuffer<float> luminance;
[numthreads(1,1,1)]
void read_luminance(uint3 globalId : SV_DispatchThreadID)
{
    luminance[0] = mip_source[uint2(0,0)].y;
}